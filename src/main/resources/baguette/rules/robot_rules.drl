package baguette

import baguette.*;
import robocode.*;
import robocode.ScannedRobotEvent;


// This definition has to be included everytime, to allow the robot consulting the actions
query "consult_actions"
  action: Action()
end


// 
////// RULES
//


// Used to store the victim's informations (if selected)
declare Victim
   name: String
   x: double
   y: double
   distance: double
   bearing: double
   heading: double
   velocity: double
   futureX: double
   futureY: double
   energy: double
end

declare Status
	energy: double
	others: int
	x: double
	y: double
	nextX: double
	nextY: double
	distanceRemaining: double
	gunHeading: double
	gunHeat: double
	gunTurnRemaining: double
	heading: double
	numRounds: int
	radarHeading: double
	radarTurnRemaining: double
	roundNum: int
	time: long
	turnRemaining: double
	velocity: double
	scanDirection: int
end


// ========== STATUS RULES ==========

// when no internal status, create it
rule "Without status -> create one"
	salience 100
	when 
		not (exists Status())
		$status: RobotState()
	then
		Status status = new Status();
		status.setEnergy($status.getEnergy());
	    status.setOthers($status.getOthers());
	    status.setX($status.getX());
	    status.setY($status.getY());
	   	status.setDistanceRemaining($status.getDistanceRemaining());
		status.setGunHeading($status.getGunHeading());
		status.setGunHeat($status.getGunHeat());
		status.setGunTurnRemaining($status.getGunTurnRemaining());
		status.setHeading($status.getHeading());
		status.setNumRounds($status.getNumRounds());
		status.setRadarHeading($status.getRadarHeading());
		status.setRadarTurnRemaining($status.getRadarTurnRemaining());
		status.setRoundNum($status.getRoundNum());
		status.setTime($status.getTime());
		status.setTurnRemaining($status.getTurnRemaining());
		status.setVelocity($status.getVelocity());
		status.setScanDirection(1);
	    insert(status);
	    System.out.println("Internal status created"); 
end
    


// when internal status, update it
rule "With status -> update it"
	salience 99
	when
		exists Status()
		$prevStatus: Status()
		$newStatus: RobotState()
	then
		$prevStatus.setEnergy($newStatus.getEnergy());
	    $prevStatus.setOthers($newStatus.getOthers());
	    $prevStatus.setX($newStatus.getX());
	    $prevStatus.setY($newStatus.getY());
	   	$prevStatus.setDistanceRemaining($newStatus.getDistanceRemaining());
		$prevStatus.setGunHeading($newStatus.getGunHeading());
		$prevStatus.setGunHeat($newStatus.getGunHeat());
		$prevStatus.setGunTurnRemaining($newStatus.getGunTurnRemaining());
		$prevStatus.setHeading($newStatus.getHeading());
		$prevStatus.setNumRounds($newStatus.getNumRounds());
		$prevStatus.setRadarHeading($newStatus.getRadarHeading());
		$prevStatus.setRadarTurnRemaining($newStatus.getRadarTurnRemaining());
		$prevStatus.setRoundNum($newStatus.getRoundNum());
		$prevStatus.setTime($newStatus.getTime());
		$prevStatus.setTurnRemaining($newStatus.getTurnRemaining());
		$prevStatus.setVelocity($newStatus.getVelocity());
	    System.out.println("Internal status updated"); 
	    System.out.println($newStatus.getTime()); 
end		


// ========== VICTIM SET & UPDATE RULES ==========

// When no victim is set, and a robot is scanned, set him as victim and begin to follow
rule "Detected 1st victim -> create it"
	salience 90
	when
		not (exists Victim())
		$scanned: ScannedRobotEvent()
	then
	    Victim victim = new Victim();
		victim.setName($scanned.getName());
		victim.setDistance($scanned.getDistance());
		victim.setBearing($scanned.getBearing());
	    victim.setHeading($scanned.getHeading());
	    victim.setVelocity($scanned.getVelocity());
	    victim.setEnergy($scanned.getEnergy());
		insert(victim);
  		System.out.println("Victim created");
end

// Detected victim ===> update it
rule "Detected victim ===> update info"
	salience 89
	when 
		exists Victim()
		$victim : Victim($name : name)
		exists ScannedRobotEvent()
		$scanned : ScannedRobotEvent($same : name)
		eval($name == $same)
	then
		$victim.setName($scanned.getName());
		$victim.setDistance($scanned.getDistance());
		$victim.setBearing($scanned.getBearing());
	    $victim.setHeading($scanned.getHeading());
	    $victim.setVelocity($scanned.getVelocity());
	    $victim.setEnergy($scanned.getEnergy());
	    System.out.println("Updated victim informations :");    
	    System.out.println($scanned.getName());	 
end
   

// Detected closer robot ===> set as victim
rule "Detected closer -> update the victim"
	salience 88
   	when
   		exists Victim()
		$victim : Victim()
		exists ScannedRobotEvent()
      	$scanned: ScannedRobotEvent()
		eval($victim.getDistance() > $scanned.getDistance());
   	then
		$victim.setName($scanned.getName());
		$victim.setDistance($scanned.getDistance());
		$victim.setBearing($scanned.getBearing());
	    $victim.setHeading($scanned.getHeading());
	    $victim.setVelocity($scanned.getVelocity());
	    $victim.setEnergy($scanned.getEnergy());
	    System.out.println("New Victim (closer)");    
	    System.out.println($scanned.getName());	    
end


// Eliminate current Victim() Fact when killed
rule "Victim's death"
	salience 88
	when
	   	$victim: Victim ($victimName: name)
	   	RobotDeathEvent( name == $victimName )
	then 
	   	retract($victim);
	   	System.out.println("VICTIM DESTROYED MOTHERF***ER");
end


// ========== RADAR RULES ==========

// When there's no robot detected, force a complete turn of radar
rule "No detected robot -> radar complete turn"
	salience 80
	when
		not (exists ScannedRobotEvent())
	then
		insert (new Action(Action.RADAR_RIGHT, 360, 1));
		System.out.println("Radar complete turn initialized");
end


// Scanned event : turn radar oscillating on the victim
rule "Scanned victim : oscillate radar on it"
	when 
		exists Victim()
		exists ScannedRobotEvent()
		$event : ScannedRobotEvent($same : name)
		$victim : Victim($name : name)
		eval($name == $same)
		$status : Status()
	then
		$status.setScanDirection(-1 * $status.getScanDirection());
		insert(new Action(Action.RADAR_RIGHT, 360 * $status.getScanDirection(), 1));
	    System.out.println("OSCILLATION on :");
	    System.out.println($name);  
end



